provider "aws" {
  region = var.region
}

variable "region" {
  description = "AWS region"
  type        = string
}

# Define VPCs for each region
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
}

# Define subnets for public and private (syslog storage) in each region
resource "aws_subnet" "public_subnet" {
  count                   = 2
  vpc_id                  = aws_vpc.main.id
  cidr_block             = cidrsubnet(aws_vpc.main.cidr_block, 4, count.index)
  availability_zone      = element(data.aws_availability_zones.available.names, count.index)
  map_public_ip_on_launch = true
}

resource "aws_subnet" "private_subnet" {
  count                   = 2
  vpc_id                  = aws_vpc.main.id
  cidr_block             = cidrsubnet(aws_vpc.main.cidr_block, 4, count.index + 2)
  availability_zone      = element(data.aws_availability_zones.available.names, count.index)
  map_public_ip_on_launch = false
}

# Security group to limit public access (only port 80 open)
resource "aws_security_group" "public_sg" {
  name        = "public_sg"
  description = "Allow HTTP traffic"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create IAM role for EC2 instances to access Syslog storage
resource "aws_iam_role" "ec2_role" {
  name               = "ec2_role"
  assume_role_policy = data.aws_iam_policy_document.ec2_assume_role_policy.json
}

data "aws_iam_policy_document" "ec2_assume_role_policy" {
  statement {
    actions   = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com"]
    }
  }
}

# EC2 Instance Deployment for each region
resource "aws_instance" "test_ec2" {
  count            = 1
  ami              = "ami-xxxxxx"  # Replace with the AMI ID of your region
  instance_type    = "t2.micro"
  subnet_id        = aws_subnet.public_subnet[0].id
  security_groups  = [aws_security_group.public_sg.name]
  key_name         = var.key_name
  associate_public_ip_address = true

  tags = {
    Name = "TestInstance"
  }
}

# Auto Scaling Group
resource "aws_launch_configuration" "app_launch_config" {
  name_prefix          = "app-launch-config"
  image_id             = "ami-xxxxxx"  # Replace with your AMI ID
  instance_type       = "t2.micro"
  security_groups     = [aws_security_group.public_sg.name]
  associate_public_ip_address = true

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_group" "app_asg" {
  desired_capacity     = 2
  max_size             = 4
  min_size             = 2
  vpc_zone_identifier  = [aws_subnet.public_subnet[0].id, aws_subnet.public_subnet[1].id]
  launch_configuration = aws_launch_configuration.app_launch_config.id
}

# Syslog Data Storage - Ensure it's only in Japan (Private Subnet)
resource "aws_instance" "syslog_server" {
  ami              = "ami-xxxxxx"  # Replace with an AMI ID specific to Japan region
  instance_type    = "t2.micro"
  subnet_id        = aws_subnet.private_subnet[0].id
  security_groups  = [aws_security_group.public_sg.name]
  key_name         = var.key_name

  tags = {
    Name = "SyslogServer"
  }
}

# Peering Connection to Transfer Data to Japan
resource "aws_vpc_peering_connection" "peer_connection" {
  vpc_id      = aws_vpc.main.id
  peer_vpc_id = aws_vpc.main.id # Peer VPC should be Japan (to demonstrate data transfer)
  auto_accept = true
}

# Outputs
output "instance_ip" {
  value = aws_instance.test_ec2.*.public_ip
}
